C
C     FORTICON8  JANUARY 2018
C     MATTHEW CLARK
C
      SUBROUTINE ITRATE(H,U,MAD,C,E,W,IOCC,HDG,NDIM,NTYPE,NC,NHDG)
C
C  SUBROUTINE TO SETUP HUCKEL MATRIX WHEN USING CHARGE ITERATION
C  OPTION ( METH = 2 OR 3 ).
C
      IMPLICIT REAL*8(A-H,O-Z)
      INCLUDE 'PARAMETERS'

      DIMENSION H(NDIM,NDIM),U(NDIM,NDIM),MAD(NTYPE,NTYPE),C(NC),
     1E(NDIM),W(NDIM),IOCC(NDIM),HDG(NHDG)
      REAL*8 MAD
      REAL*4 IOCC

      COMMON/TITLE/AB(10)
      COMMON/CNTRL/CON,PEEP,COULH,NH,NA,NATM,KA,NELEC,METH,IPRINT,
     1IPUNCH,L1,L2,L3,L4,L5,ONEMAT,ITERAT
      LOGICAL*1 L1,L2,L3,L4,L5,ONEMAT,ITERAT
      COMMON/OUT/PRT(20),PUN(20)
      LOGICAL*1 PRT,PUN

      INCLUDE 'ATOMCOMMON'
 
      COMMON/ITPARM/DAMP1,DAMP2,DAMP3,LAMPRI,DELTAC,SENSE,MAXCYC,PRTCYC,
     1ICYCLE,NCON,PARTIT,PRINTX,ITABLE(20)
      REAL*8 LAMPRI
      INTEGER*4 PRTCYC
      LOGICAL*1 PARTIT,PRINTX,ITABLE
C
C  SINCE THE INTERNAL ATOMIC PARAMETERS ( EXPS,EXPP, ETC. ) ARE
C  NOT USED WHEN DOING CHARGE ITERATION, THE SPACE ALLOCATED TO
C  THEM HAS BEEN USED FOR THE VSIE PARAMETERS.
C
      DIMENSION AS1(MXUSER),BS1(MXUSER),CS1(MXUSER),AP1(MXUSER),
     .BP1(MXUSER),CP1(MXUSER),AD1(MXUSER),BD1(MXUSER),CD1(MXUSER)  
      EQUIVALENCE (AS1(1),EXPS(MXUSR2)),(BS1(1),EXPP(MXUSR2)),
     .(CS1(1),EXPD(MXUSR2)),(AP1(1),EXPD2(MXUSR2)),
     .(BP1(1),C1(MXUSR2)),(CP1(1),C2(MXUSR2)),
     .(AD1(1),COULS(MXUSR2)),(BD1(1),COULP(MXUSR2)),
     .(CD1(1),COULD(MXUSR2))
      COMMON/ABC/AS2(5),BS2(5),CS2(5),AP2(5),BP2(5),CP2(5),AD2(5),
     1BD2(5),CD2(5),AS3(5),BS3(5),CS3(5),AP3(5),BP3(5),CP3(5),AD3(5),
     2BD3(5),CD3(5)
      REAL*4 ZS(MXUSER),ZP(MXUSER),ZD(MXUSER)
      EQUIVALENCE (ZS(1),NS(MXUSR2)),(ZP(1),NP(MXUSR2)),
     .(ZD(1),ND(MXUSR2)) 
      DIMENSION IL(3),JL(3)
      EQUIVALENCE (PEEP,ADJUST),(COULH,SIGNN),(SENSE,DENSE),
     1(VELEC(81),DCHG),(PRT(1),NMIN),(PUN(1),NLN)
      DIMENSION F(6)
      EQUIVALENCE (A1,F(1)),(A2,F(3)),(A3,F(5))
      REAL*8 LAMBDA

      NLF=0
      QON=DFLOAT(KA)/DFLOAT(NELEC)
      IF(ICYCLE.GT.1) GO TO 696
      WRITE(6,750)
750   FORMAT('1')
      DO 5 I=1,NDIM
      NMIN=I
      IF(IOCC(I).GT.0.0001) GO TO 697
5     CONTINUE
C
C  IF CHARGE ITERATION WITH MADELUNG CORRECTION ( METH>2 ) IS BEING
C  USED, COMPUTE THE TOTAL ORBITAL OCCUPATIONS FOR THE FREE ATOMS.
C  FILL ATOMIC ORBITALS IN ORDER0 1S 2S 2P 3S 3P 3D 4S 4P 4D 5S 5P
C  5D 6S 6P.
C
697   IF(METH.LT.3) GO TO 696
      PRTCYC=MAXCYC
      DO 700 I=1,NA
      KEYI=KEY(I)
      J=NP(KEYI)
      IF(J.EQ.0) GO TO 701
      IL(2)=J*10+1
      JL(2)=2
      J=NS(KEYI)
      IL(1)=J*10
      JL(1)=1
      J=ND(KEYI)
      IF(J.EQ.0) GO TO 702
      IL(3)=J*10+2
      JL(3)=3
      DO 710 J=2,3
      IJ=4-J
      K=IJ+1
      DO 710 L=1,IJ
      N=K-L
      IF(IL(K).GT.IL(N)) GO TO 710
      I1=IL(K)
      J1=JL(K)
      IL(K)=IL(N)
      JL(K)=JL(N)
      IL(N)=I1
      JL(N)=J1
710   CONTINUE
      GO TO 720
701   JL(1)=1
      JL(2)=2
      JL(3)=3
      GO TO 720
702   JL(3)=3
      IF(IL(1).LT.IL(2)) GO TO 720
      JL(2)=1
      JL(1)=2
720   L=VELEC(KEYI)
      DO 700 J=1,3
      K=JL(J)
      J1=4*(K-1)+2
      IF(L.LT.J1) J1=L
      L=L-J1
      IF(K-2) 725,726,727
725   ZS(KEYI)=FLOAT(J1)
      GO TO 700
726   ZP(KEYI)=FLOAT(J1)
      GO TO 700
727   ZD(KEYI)=FLOAT(J1)
700   CONTINUE
696   IF(PRINTX) WRITE(6,751)
751   FORMAT(////)
      PRINTX=((ICYCLE/PRTCYC)*PRTCYC.EQ.ICYCLE)
      IF(ICYCLE.EQ.MAXCYC) PRINTX=.TRUE.
C
C  CALCULATE SUM OF ONE-ELECTRON ENERGIES.
C
      SUM=0.0D0
      DO 13 I=1,NDIM
      W(I)=DBLE(IOCC(I))
13    SUM=SUM+E(I)*W(I)
C
C  COMPUTE ATOMIC ORBITAL OCCUPATIONS AND STORE IN E(I).
C
      IJ=1
      DO  319  I=1,NDIM
      E(I)=0.0D0
      DO  319  J=1,I
      UB=0.0D0
      DO 320 K=NMIN,NDIM
320   UB=UB+H(I,K)*H(J,K)*W(K)
      UB=UB*0.50D0
      IF(I.EQ.J)  GO  TO  28
      UB=(UB+UB)*C(IJ)
      IJ=IJ+1
28    E(I)=E(I)+UB
      E(J)=E(J)+UB
319   CONTINUE
C
C  COMPUTE THE ORBITAL OCCUPATION OF A GIVEN TYPE (S,P,D) WHICH
C  VARIES MOST FROM THE LAST CYCLE.
C
      DENOM=0.0D0
      DENSE2=DENSE
      DCHG2=DCHG
      J=1
      DO  5000 I=1,NA
      KEYI=KEY(I)
      SDENSE=E(J)
      SIGNS=SDENSE-X(I)
      C(J)=SIGNS
      DIFFS=DABS(SIGNS)
      N=J
      IF(DENOM.GT.DIFFS) GO TO 5001
      DENSE=X(I)
      DCHG=SIGNS
      DENOM=DIFFS
      NLF=10*I
5001  IF(NP(KEYI).EQ.0) GO TO 5000
      PDENSE=E(J+1)+E(J+2)+E(J+3)
      SIGNP=PDENSE-Y(I)
      C(J+3)=SIGNP
      DIFFP=DABS(SIGNP)
      N=J+3
      IF(DENOM.GT.DIFFP) GO TO 5002
      DENSE=Y(I)
      DCHG=SIGNP
      DENOM=DIFFP
      NLF=10*I+1
5002  IF(ND(KEYI).EQ.0) GO TO 5000
      DDENSE=E(J+4)+E(J+5)+E(J+6)+E(J+7)+E(J+8)
      SIGND=DDENSE-Z(I)
      C(J+8)=SIGND
      DIFFD=DABS(SIGND)
      N=J+8
      IF(DENOM.GT.DIFFD) GO TO 5000
      DENSE=Z(I)
      DCHG=SIGND
      DENOM=DIFFD
      NLF=10*I+2
5000  J=N+1
      SIGNF=DCHG/DENOM
C
C  DETERMINE LAMBDA, THE DAMPING FACTOR.
C
      IF(ICYCLE.LE.2) SIGNN=SIGNF
      IF(ICYCLE.LE.2) NLN=NLF
      ISIGNN=SIGNN
      ISIGNF=SIGNF
      IF(ICYCLE.EQ.2) ADJUST=DAMP1*DENOM
      IF(ISIGNN.EQ.ISIGNF.OR.NLN.NE.NLF) GO TO 8001
      IF(DAMP3.NE.0.0D0) GO TO 401
      LAMBDA=(DENSE2-DENSE)/(DCHG-DCHG2)
      GO TO 402
401   ADJUST=DAMP3*ADJUST
8001  IF((ADJUST/DENOM).GE.LAMPRI) ADJUST=DAMP2*DENOM
      IF(ICYCLE.EQ.1) ADJUST=DENOM
      LAMBDA=ADJUST/DENOM
402   SIGNN=SIGNF
      NLN=NLF
C
C
C  IN THIS SECTION OF THE PROGRAM THREE CALCULATIONS ARE PERFORMED0
C
C    1. THE TOTAL ORBITAL OCCUPATIONS OF A GIVEN TYPE (S,P,D) ARE
C       DAMPED AND STORED (IN X(I),Y(I),Z(I) RESPECTIVELY).
C    2. THE NET CHARGES ARE CALCULATED AND STORED IN C(I).
C    3. -VSIE'S ARE CALCULATED AND STORED IN W(I).
C
C
      J=1
      DO 803 I=1,NA
      KEYI=KEY(I)
      SDENSE=X(I)+LAMBDA*C(J)
      X(I)=SDENSE
      UB=SDENSE
      N=J
      IF(NP(KEYI).EQ.0) GO TO 804
      PDENSE=Y(I)+LAMBDA*C(J+3)
      Y(I)=PDENSE
      UB=UB+PDENSE
      N=J+3
      IF(ND(KEYI).EQ.0) GO TO 805
      N=J+8
      DDENSE=Z(I)+LAMBDA*C(J+8)
      Z(I)=DDENSE
      UB=UB+DDENSE
      GO TO 806
804   Q=VELEC(KEYI)-UB
      IF(.NOT.PARTIT) GO TO 1111
      IF(ITABLE(KEYI)) GO TO 1111
      W(J)=COULS(KEYI)
      GO TO 807
1111  KEYI=MXUSR2-KEY(I)
      W(J)=-((AS1(KEYI)*Q+BS1(KEYI))*Q+CS1(KEYI))
      GO TO 807
805   Q=VELEC(KEYI)-UB
      IF(.NOT.PARTIT) GO TO 1113
      IF(ITABLE(KEYI)) GO TO 1113
      W(J)=COULS(KEYI)
      W(J+1)=COULP(KEYI)
      W(J+2)=COULP(KEYI)
      W(J+3)=COULP(KEYI)
      GO TO 807
1113  KEYI=MXUSR2-KEY(I)
      VSIES1=(AS1(KEYI)*Q+BS1(KEYI))*Q+CS1(KEYI)
      W(J)=-VSIES1
      VSIEP1=(AP1(KEYI)*Q+BP1(KEYI))*Q+CP1(KEYI)
      W(J+1)=-VSIEP1
      W(J+2)=-VSIEP1
      W(J+3)=-VSIEP1
      GO TO 807
806   Q=VELEC(KEYI)-UB
      IF(.NOT.PARTIT) GO TO 1115
      IF(ITABLE(KEYI)) GO TO 1115
      W(J)=COULS(KEYI)
      W(J+1)=COULP(KEYI)
      W(J+2)=COULP(KEYI)
      W(J+3)=COULP(KEYI)
      W(J+4)=COULD(KEYI)
      W(J+5)=COULD(KEYI)
      W(J+6)=COULD(KEYI)
      W(J+7)=COULD(KEYI)
      W(J+8)=COULD(KEYI)
      GO TO 807
1115  IF(ND(KEYI).EQ.NP(KEYI)) GO TO 1116
      IF(NCON.NE.3) GO TO 1116
      KEYI=MXUSR2-KEY(I)
      VSIES1=(AS1(KEYI)*Q+BS1(KEYI))*Q+CS1(KEYI)
      VSIES2=(AS2(KEYI)*Q+BS2(KEYI))*Q+CS2(KEYI)
      VSIES3=(AS3(KEYI)*Q+BS3(KEYI))*Q+CS3(KEYI)
      W(J)=(SDENSE+PDENSE-2.0D0)*VSIES1+(1.0D0-SDENSE)*VSIES2-
     *PDENSE*VSIES3
      VSIEP1=(AP1(KEYI)*Q+BP1(KEYI))*Q+CP1(KEYI)
      VSIEP2=(AP2(KEYI)*Q+BP2(KEYI))*Q+CP2(KEYI)
      VSIEP3=(AP3(KEYI)*Q+BP3(KEYI))*Q+CP3(KEYI)
      W(J+1)=(SDENSE+PDENSE-2.0D0)*VSIEP1+(1.0D0-PDENSE)*VSIEP2-
     *SDENSE*VSIEP3
      W(J+2)=W(J+1)
      W(J+3)=W(J+1)
      VSIED1=(AD1(KEYI)*Q+BD1(KEYI))*Q+CD1(KEYI)
      VSIED2=(AD2(KEYI)*Q+BD2(KEYI))*Q+CD2(KEYI)
      VSIED3=(AD3(KEYI)*Q+BD3(KEYI))*Q+CD3(KEYI)
      W(J+4)=(SDENSE+PDENSE-1.0D0)*VSIED1-SDENSE*VSIED2-PDENSE*VSIED3
      W(J+5)=W(J+4)
      W(J+6)=W(J+4)
      W(J+7)=W(J+4)
      W(J+8)=W(J+4)
      GO TO 807
1116  KEYI=MXUSR2-KEY(I)
      VSIES1=(AS1(KEYI)*Q+BS1(KEYI))*Q+CS1(KEYI)
      W(J)=-VSIES1
      VSIEP1=(AP1(KEYI)*Q+BP1(KEYI))*Q+CP1(KEYI)
      W(J+1)=-VSIEP1
      W(J+2)=W(J+1)
      W(J+3)=W(J+1)
      VSIED1=(AD1(KEYI)*Q+BD1(KEYI))*Q+CD1(KEYI)
      W(J+4)=-VSIED1
      W(J+5)=W(J+4)
      W(J+6)=W(J+4)
      W(J+7)=W(J+4)
      W(J+8)=W(J+4)
807   J=N+1
      C(I)=Q
803   CONTINUE
C
C  IF CHARGE ITERATION WITHOUT MADELUNG CORRECTION ( METH=2 ) IS
C  BEING USED, SETUP HUCKEL MATRIX. OTHERWISE SKIP THIS SECTION.
C
      IF(METH.GT.2) GO TO 999
      H(1,1)=W(1)
      CNST=CON
      DO 760 I=2,NDIM
      H(I,I)=W(I)
      J1=I-1
      DO 760 J=1,J1
      UB=W(I)+W(J)
      IF(.NOT.L5) GO TO 761
      UC=(W(I)-W(J))/UB
      UC=UC*UC
      CNST=CON+UC/2.0D0+UC*UC*(0.5D0-CON)
761   UB=CNST*U(I,J)*UB
      H(J,I)=UB
760   H(I,J)=UB
      GO TO 850
C
C  IF CHARGE ITERATION WITH MADELUNG CORRECTION ( METH>2 ) IS BEING
C  USED, SETUP HUCKEL MATRIX. OTHERWISE SKIP THIS SECTION.
C
999   DGSUM=0.0D0
      N=1
      M=1
      DO 880 I=1,NA
      KEYI=KEY(I)
      N1=N
      IF(NP(KEYI).NE.0) N1=N+1
      IF(ND(KEYI).NE.0) N1=N+2
      DO 881 J=N,N1
      DG1=0.0D0
      DG2=0.0D0
      L=1
      DO 882 K=1,NA
      KEYK=KEY(K)
      UB=(X(K)-DBLE(ZS(KEYK)))*MAD(J,L)
      UC=X(K)*MAD(J,L)
      L=L+1
      IF(NP(KEYK).EQ.0) GO TO 883
      UB=UB+(Y(K)-DBLE(ZP(KEYK)))*MAD(J,L)
      UC=UC+Y(K)*MAD(J,L)
      L=L+1
      IF(ND(KEYK).EQ.0) GO TO 883
      UB=UB+(Z(K)-DBLE(ZD(KEYK)))*MAD(J,L)
      UC=UC+Z(K)*MAD(J,L)
      L=L+1
883   IF(K.NE.I) DG1=DG1+UB
882   DG2=DG2+UC
      J1=M+2*(J-N)
      DO 884 L=M,J1
      H(L,L)=W(L)+DG1
      IF(L5) HDG(L)=H(L,L)+QON*DG2
      W(L)=DG2
884   DGSUM=DGSUM+DG2
881   M=J1+1
880   N=N1+1
      CNST=CON
      DO 885 I=2,NDIM
      J1=I-1
      DO 885 J=1,J1
      IF(.NOT.L5) GO TO 886
      UB=(HDG(I)-HDG(J))/(HDG(I)+HDG(J))
      UB=UB*UB
      CNST=CON+UB/2.0D0+UB*UB*(0.5D0-CON)
886   UB=U(I,J)*(CNST*(H(I,I)+H(J,J))-QON*(0.5D0-CNST)*(W(I)+W(J)))
      H(I,J)=UB
885   H(J,I)=UB
      DGSUM=-(QON*DGSUM)/DFLOAT(NDIM)
C
C  IF DOING LAST CYCLE CALCULATE ENERGY CORRECTIONS.
C
      IF(ICYCLE.NE.MAXCYC) GO TO 850
      N=1
      UB=0.0D0
      UC=0.0D0
      DO 887 I=1,NA
      KEYI=KEY(I)
      K=N
      A1=X(I)
      E(1)=DBLE(ZS(KEYI))
      UB=UB-0.5D0*(A1*A1-A1)*MAD(N,N)
      IF(NP(KEYI).EQ.0) GO TO 888
      N=N+1
      A2=Y(I)
      E(3)=DBLE(ZP(KEYI))
      UB=UB-0.5D0*(A2*A2-A2)*MAD(N,N)-A1*A2*MAD(N-1,N)
      IF(ND(KEYI).EQ.0) GO TO 888
      N=N+1
      A3=Z(I)
      E(5)=DBLE(ZD(KEYI))
      UB=UB-0.5D0*(A3*A3-A3)*MAD(N,N)-A1*A3*MAD(N-2,N)-A2*A3*MAD(N-1,N)
888   M=1
      I1=I-1
      IF(I1.EQ.0) GO TO 887
      DO 889 J=1,I1
      KEYJ=KEY(J)
      L=M
      F(2)=X(J)
      E(2)=DBLE(ZS(KEYJ))
      IF(NP(KEYJ).EQ.0) GO TO 890
      M=M+1
      F(4)=Y(J)
      E(4)=DBLE(ZP(KEYJ))
      IF(ND(KEYJ).EQ.0) GO TO 890
      M=M+1
      F(6)=Z(J)
      E(6)=DBLE(ZD(KEYJ))
890   DO 891 IJ=K,N
      DO 891 JK=L,M
      N1=2*(IJ-K)+1
      M1=2*(JK-L)+2
891   UC=UC-(F(N1)*F(M1)-E(N1)*E(M1))*MAD(IJ,JK)
889   M=M+1
887   N=N+1
      A1=UB
      A2=UC
      A3=UB+UC
C
C  SAVE MADELUNG TERMS FOR USE IN SUBROUTINE OUTPUT IF DOING
C  THE LAST CYCLE.
C
      K=1
      L=1
      DO 792 I=1,NA
      KEYI=KEY(I)
      MAD(K,K)=W(L)
      K=K+1
      L=L+1
      IF(NP(KEYI).EQ.0) GO TO 792
      MAD(K,K)=W(L)
      K=K+1
      L=L+3
      IF(ND(KEYI).EQ.0) GO TO 792
      MAD(K,K)=W(L)
      K=K+1
      L=L+5
792   CONTINUE
C
C  PRINT OUT RESULTS TO SHOW PROGRESS OF ITERATION PROCEDURE.
C
850   IF(PRTCYC.GT.0) WRITE(6,793) ICYCLE
793   FORMAT('CYCLE NO.',I3,'0')
      IF(PRTCYC.LT.0) WRITE(6,794)
794   FORMAT(/,'CONVERGENCE REACHED - FINAL CYCLE FOLLOWS',///)
      PRTCYC=IABS(PRTCYC)
      J=NLF/10
      K=NLF-10*J
      WRITE(6,795) SUM,LAMBDA,J,ISIGNF,DENOM,ADJUST,K
795   FORMAT('+',T25,'ENERGY =',F15.8,T52,'LAMBDA =',F8.5,T78,'ATOM =',
     1I3,T92,'SIGN =',I3,/,T25,'DENOM =',D16.8,T52,'ADJUST =',D14.7,
     2T78,'NL   =',I3)
C
C  PRINT OUT ATOMIC CHARGES, ORBITAL OCCUPATIONS, AND CORRECTED
C  H(I,I)'S IF PRINTX IS TRUE.
C
      IF(.NOT.PRINTX) GO TO 500
      WRITE(6,600)
600   FORMAT(////,T16,'ATOM',T30,'NET CHG.-DAMPED',T60,'SUMMED ORBITAL O
     1CCUPATIONS-DAMPED'/T65,'S',T75,'P',T85,'D'/)
      DO 650 I=1,NA
      KEYI=KEY(I)
      WRITE(6,601) X(I)
601   FORMAT(T60,F10.5)
      IF(NP(KEYI).EQ.0) GO TO 625
      WRITE(6,602) Y(I)
602   FORMAT('+',T70,F10.5)
      IF(ND(KEYI).EQ.0) GO TO 625
      WRITE(6,603) Z(I)
603   FORMAT('+',T80,F10.5)
625   UB=C(I)
650   WRITE(6,604) SYMBOL(KEYI),I,UB
604   FORMAT('+',T15,A2,I3,T30,F10.5)
      WRITE(6,809)
809   FORMAT(///,T16,'ATOM',T70,'CORRECTED H(I,I)''S',/T40,'S',T50,
     1'X',T60,'Y',T70,'Z',T80,'X2-Y2',T90,'Z2',T100,'XY',T110,'XZ',
     2T120,'YZ'/)
      J=1
      DO 810 I=1,NATM
      KEYI=KEY(I)
      N=J
      IF(NP(KEYI).NE.0) N=J+3
      IF(ND(KEYI).NE.0) N=J+8
      WRITE(6,816) SYMBOL(KEYI),I,(H(K,K),K=J,N)
816   FORMAT(T15,A2,I3,T35,9F10.5)
810   J=N+1
      IF(METH.GE.3.AND.DABS(QON).GT.0.0001D0) WRITE(6,870) DGSUM
870   FORMAT(///,T15,'AVERAGE SHIFT OF MO''S DUE TO NON-ZERO TOTAL CHARG
     1E =',F12.8,' EV.')
      IF(METH.GE.3.AND.ICYCLE.EQ.MAXCYC) WRITE(6,808) A1,A2,A3
808   FORMAT(///,T15,'ENERGY CORRECTIONS0',//,T20,'ONE-CENTER',T40,
     1F16.8,' EV.',//,T20,'TWO-CENTER',T40,F16.8,' EV.',//,T20,'TOTAL',
     2T40,F16.8,' EV.')
      WRITE(6,752)
752   FORMAT(///)
500   ICYCLE=ICYCLE+1
C
C  CHECK FOR CONVERGENCE ( IE. DENOM LESS THAN DELTAC ).
C
      IF(ICYCLE.GE.MAXCYC) GO TO 433
      IF(ICYCLE.LE.2) GO TO 433
      IF(DENOM.GE.DELTAC) GO TO 433
      ICYCLE=MAXCYC
      PRTCYC=-PRTCYC
433   RETURN
      END
