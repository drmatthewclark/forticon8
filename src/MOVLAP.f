C
C     FORTICON8  JANUARY 2018
C     MATTHEW CLARK
C
      SUBROUTINE MOVLAP(H,S,MAD,C,SP,PD,MAXS,MAXP,MAXD,COUL0,SORB,
     .IOCC,HDG,     NDIM, ND1 ,NC,NATOM,NTYPE,NHDG)
C
C     SUBROUTINE TO CALCULATE INTERATOMIC DISTANCES, OVERLAP
C     INTEGRALS, AND MADELUNG PARAMETERS.
C
      IMPLICIT REAL*8 (A-H,O-Z)
      INCLUDE 'PARAMETERS'

      DIMENSION H(NDIM,NDIM),S(NDIM,NDIM),MAD(NTYPE,NTYPE),C(NC),
     .SP(NDIM),PD(NDIM),MAXS(NDIM),MAXP(NDIM),MAXD(NDIM),
     .COUL0(MXUSER),SORB(NATOM),IOCC(NDIM),HDG(NHDG)              
      REAL*8 MAD
      LOGICAL*4 SP,PD
      INTEGER*4 COUL0,SORB
C
C     COUL0 DIMENSIONED AT 20 FOR EASY READING DURING PROCESSING
C     OF DELETION INPUT. DELETIONS DONE IN SUBROUTINE DELETS.
C
      COMMON/TITLE/AB(10)
      COMMON/CNTRL/CON,PEEP,COULH,NH,NA,NATM,KA,NELEC,METH,
     .IPRINT,IPUNCH,LA,LB,L3,L4,L5,ONEMAT,ITERAT
      LOGICAL*1 LA,LB,L3,L4,L5,ONEMAT,ITERAT
      COMMON/OUT/PRT(20),PUN(20)
      LOGICAL*1 PRT,PUN
 
      INCLUDE 'ATOMCOMMON'

      CHARACTER*2 STAR,STAR2
      COMMON/STARS/STAR,STAR2
      COMMON /LOCLAP/ SK1,SK2,R,L1,L2,M,N1,N2,MAX
      REAL*4 MADS(MXUSER),MADP(MXUSER),MADD(MXUSER)
      EQUIVALENCE (MADS(1),NS(MXUSR2)),(MADP(1),NP(MXUSR2)),
     .(MADD(1),ND(MXUSR2))                                         
      DIMENSION PTR(9),DTR(25)
      DIMENSION A(MXUSER),B(MXUSER),A1(MXUSER),B1(MXUSER)
      LOGICAL*1 JGO
      EQUIVALENCE (PTR(3),CA),(PTR(8),CB)
C
C     UPDATE THIS VALUE TO MORE ACCURATE NUMBER
C     DATA SQRT3/1.7320508075688770/
C     THIS SUBROUTINE IS ONLY CALLED 3 TIMES IN A RUN
C     SO WHY NOT GET AN ACCURATE NUMBER FROM THE COMPILER
      SQRT3 = DSQRT(3.0D0)

C
C NIST ATOMIC UNIT = 0.52917721067 D-10M 
C https://physics.nist.gov/cgi-bin/cuu/Value?tbohrrada0
C USING THIS TO UPDATE AUI TO MORE ACCURATE FIGURE
C     AUI = 1/0.52917721067(12)ANGSTROMS
C     DATA AUI/1.889644746D0/
C     MC 1/2018
C
      DATA AUI/1.889726125457828193211977346016D0/
C
C 27.21138602D0 EV = 1 HARTREE CHANGED TO EXACT VALUE FROM 27.21
C USED BY OLD CODE MC
C
      DATA EVTOHARTREE/27.21138602D0/

      DATA PTR(9)/0.D0/,DTR(12)/0.D0/,DTR(22)/0.D0/
      NH1=NH+1
C
C     HYDROGEN-HYDROGEN OVERLAPS.
C
      IF(NH.LE.1) GO TO 106
      DO 107 I=2,NH
      IM1=I-1
      DO 107 J=1,IM1
      R=DSQRT((X(I)-X(J))**2+(Y(I)-Y(J))**2+(Z(I)-Z(J))**2)
C
C     STORE OVERLAPS IN UPPER RIGHT TRIANGLE OF S(I,J). PUT
C     DISTANCES IN LOWER RIGHT TRIANGLE.
C
      S(I,J)=R
      R=R*PEEP*AUI
      IF(R.GT.50) GO TO 105
      SIGMA=(1.D0+R*(1.D0+R/3.D0))/DEXP(R)
      GO TO 107
105   SIGMA=0.D0
107   S(J,I)=SIGMA
C
C     HEAVY ATOM-HEAVY ATOM OVERLAPS. LOCAL COORDINATE SYSTEM
C     CENTERED ON ATOM J. FILL IN UPPER RIGHT TRIANGLE OF S(I,J).
C
106   IORB=NH1
      DO 130 I=1,NA
      INH=I+NH
      IM1=I-1
      KEYI=KEY(I)

      MAXD(I)=ND(KEYI)
      MAXP(I)=NP(KEYI)
      MAXS(I)=NS(KEYI)
      SP(I)=EXPS(KEYI) .EQ. EXPP(KEYI)
      PD(I)=EXPP(KEYI) .EQ. EXPD(KEYI)
      IF(PD(I)) MAXP(I)=MAX0(MAXP(I),MAXD(I))
      IF(SP(I)) MAXS(I)=MAX0(NS(KEYI),MAXP(I))
      SORB(I)=IORB
C
C     SORB(I) CONTAINS A POINTER TO THE S ORBITAL ON ATOM I.
C
      IORBS=IORB
      IORB=IORB+4
      IF(NP(KEYI).EQ.0) IORB=IORB-3
      IF(ND(KEYI).NE.0) IORB=IORB+5
      IF(NP(KEYI).EQ.0) GO TO 298
      JD=IORB-1
      JD1=JD-1
      DO 280 JC = IORBS,JD1
      ID=JC+1
      DO 280 IC=ID,JD
280   S(JC,IC)=0.D0
298   CONTINUE
      IF(I.EQ.1) GO TO 300
      DO 131 J=1,IM1
      KEYJ=KEY(J)
      JNH=J+NH
      JORBS=SORB(J)
      DELX=X(INH)-X(JNH)
      DELY=Y(INH)-Y(JNH)
      DELZ=Z(INH)-Z(JNH)
      RT2=DELX**2+DELY**2
      R=DSQRT(RT2+DELZ**2)
      S(INH,JNH)=R
C
C     STORE DISTANCES IN LOWER LEFT TRIANGLE OF S(I,J).
C
      IF(R.GT.0.0D0) GO TO 102
      ID=IORB-1
      JD=SORB(J+1)-1
      DO 103 IC=IORBS,ID
      DO 103 JC=JORBS,JD
103   S(JC,IC)=0.0D0
      GO TO 131
102   IF(RT2.GT.1.E-10) GO TO 135
      CB=1.D0
      SB=0.D0
      SA=0.D0
      GOTO 136
135   T=DSQRT(RT2)
      CB=DELX/T
      SB=DELY/T
      SA=T/R
136   CA=DELZ/R
C
C     THE TRANSFORMATION MATRICES ARE CALCULATED EXPLICITLY.
C     PTR IS THE MATRIX FOR PROJECTING THE X,Y,Z ORBITALS
C     ONTO THE LOCAL SYSTEM. THE ELEMENTS ARE ORDERED SO THAT FIRST
C     X THEN Y THEN Z IS PROJECTED ONTO THE Z' AXIS (SIGMA).
C     THEN THE 3 ARE PROJECTED ONTO THE X' AXIS AND THEN THE Y' (PI).
C     THE D ORBITALS ARE HANDLED SIMILARLY. THE ORDER OF PROJECTION
C     IS X2-Y2,Z2,XY,XZ,YZ FIRST ONTO Z2'(SIGMA)AND THEN ONTO XZ' AND
C     YZ'(PI). FINALLY THE 5 ORBITALS ARE PROJECTED ONTO X'2-Y'2 AND
C     THEN XY' (DELTA).
C
C     THOSE PTR AND DTR WHICH ARE ZERO ARE INITIALIZED IN A DATA STATE-
C     MENT.  CA AND CB HAVE BEEN EQUIVALENCED TO PTR(3) AND PTR(8)
C     RESPECTIVELY TO SAVE TIME.
C
      PTR(1)= SA*CB
      PTR(2)= SA*SB
C ...      PTR(3)= CA
      PTR(4)= CA*CB
      PTR(5)= CA*SB
      PTR(6)= -SA
      PTR(7)= -SB
C ...      PTR(8)= CB
C ...      PTR(9)= 0.D0
      IF(ND(KEYI)+ND(KEYJ).EQ.0) GO TO 180
      CA2=CA**2
      SA2=SA*SA
      CB2=CB*CB
      SB2=SB*SB
      CBSB= CB*SB
      CASA= CA*SA
      CB2SB2= CB2-SB2
      DTR(1)= SQRT3*.5D0*SA2*CB2SB2
      DTR(2)= 1.D0-1.5D0*SA2
      DTR(3)= SQRT3*CBSB*SA2
      DTR(4)= SQRT3*CASA*CB
      DTR(5)= SQRT3*CASA*SB
      DTR(6)= CASA*CB2SB2
      DTR(7)= -SQRT3*CASA
      DTR(8)= 2.D0*CASA*CBSB
      DTR(9)= CB*(CA2-SA2)
      DTR(10)= SB*(CA2-SA2)
      DTR(11)= -2.D0*SA*CBSB
C ...      DTR(12)= 0.D0
      DTR(13)= SA* CB2SB2
      DTR(14)= -PTR(5)
      DTR(15)= PTR(4)
      IF(ND(KEYI)*ND(KEYJ).EQ.0) GO TO 180
      DTR(16)=.5D0*(1.D0+CA2)*CB2SB2
      DTR(17)= .5D0*SQRT3*SA2
      DTR(18)= CBSB*(1.D0+CA2)
      DTR(19)= -CASA*CB
      DTR(20)= -CASA*SB
      DTR(21)= -2.D0*CA*CBSB
C ...      DTR(22)= 0.D0
      DTR(23)= CA*CB2SB2
      DTR(24)= PTR(2)
      DTR(25)= -PTR(1)
180   R=R*AUI
C
C     (S(I)!S(J)).
C
      N2=NS(KEYJ)
      N1=NS(KEYI)
      L2=0
      L1=0
      M=0
      MAX=MAXS(I)+MAXS(J)
      SK1=EXPS(KEYI)
      SK2=EXPS(KEYJ)
 
      CALL ABFNS(A,B)
      CALL LOVLAP(SIGMA,A,B)
      S(JORBS,IORBS)=SIGMA
C
C     IF THE S EXPONENT OF ATOM I EQUALS THE P EXPONENT WE NEED
C     NOT CALCULATE THE A AND B FUNCTIONS AGAIN.
C
C     (P(I)!S(J)).
C
      JGO=.FALSE.
      IF(KEYI.EQ.KEYJ) GO TO 126
      IF((.NOT.SP(I)).OR.(NP(KEYI).EQ.0)) GO TO 126
220   N1=NP(KEYI)
      L1=1
      CALL LOVLAP(SIGMA,A,B)
      SIGMA=-SIGMA
      DO 200 IC=1,3
200   S(JORBS,IORBS+IC)=PTR(IC)*SIGMA
      IF(PD(I)) GO TO 221
      IF(JGO) GO TO 217
      GO TO 137
C
C     (D(I)!S(J)) CONDITIONALLY AT FIRST CHANCE.
C
221   N1=ND(KEYI)
      L1=2
      CALL LOVLAP(SIGMA,A,B)
      IF(C2(KEYI).EQ.0.D0) GO TO 167
      SK1=EXPD2(KEYI)
      CALL ABFNS(A1,B1)
      CALL LOVLAP(PART2,A1,B1)
      SIGMA=C1(KEYI)*SIGMA+C2(KEYI)*PART2
      SK1=EXPD(KEYI)
167   ID=IORBS+3
      DO 201 IC=1,5
201   S(JORBS,ID+IC)=DTR(IC)*SIGMA
C
C     CALCULATE (D(I)!P(J)) IF CAN USE SAME A'S AND B'S.
C
      IF(SP(J)) GO TO 222
      IF(JGO) GO TO 228
      GO TO 137
222   N2=NP(KEYJ)
      L2=1
      M=0
      CALL LOVLAP(SIGMA,A,B)
      M=1
      CALL LOVLAP(PI,A,B)
      IF(C2(KEYI).EQ.0.D0) GO TO 1169
      SK1=EXPD2(KEYI)
      CALL LOVLAP(PART2,A1,B1)
      PI=C1(KEYI)*PI+C2(KEYI)*PART2
      M=0
      CALL LOVLAP(PART2,A1,B1)
      SK1=EXPD(KEYI)
      SIGMA=C1(KEYI)*SIGMA+C2(KEYI)*PART2
1169  PI=-PI
      ID=IORBS+3
      DO 195 JC=1,3
      DO 195 IC=1,5
195   S(JORBS+JC,ID+IC)=PTR(JC)*DTR(IC)*SIGMA+(PTR(JC+3)*DTR(IC+5)
     .+PTR(JC+6)*DTR(IC+10))*PI
      IF(JGO) GO TO 131
C
C     NOW TEST FOR DUPLICATE EXPONENTS ON ATOM J.
C     HOWEVER DO CALCULATIONS ANYHOW.
C
137   N1=NS(KEYI)
      L1=0
C
C     (S(I)!P(J)).
C
126   IF(SP(J)) GO TO 138
      IF(NP(KEYJ).EQ.0) GO TO 210
      MAX=MAXS(I)+MAXP(J)
      SK2=EXPP(KEYJ)
      CALL ABFNS(A,B)
138   N2=NP(KEYJ)
      L2=1
      M=0
      CALL LOVLAP(SIGMA,A,B)
      DO 202 IC=1,3
202   S(JORBS+IC,IORBS)=PTR(IC)*SIGMA
      IF(SP(I)) GO TO 156
      JGO=.TRUE.
      IF(ND(KEYJ).NE.0) GO TO 149
C
C     BRANCH TO TEST FOR EXPP(J) .EQ. EXPD(J). CALCULATE (S!D) ANYHOW.
C     RETURN WILL BE MADE TO THE NEXT STATEMENT.
C
C     (P(I)!P(J))   EXPP(I) EQ,NE EXPS(I).
C
      GO TO 646
146   N2=NP(KEYJ)
      L2=1
      SK2=EXPP(KEYJ)
646   IF(NP(KEYI).EQ.0) GO TO 210
      SK1=EXPP(KEYI)
C
C     THESE STATEMENTS USED ONLY IF HAVE ALREADY CALCULATED (S(I)!D(J))
C     WHICH MEANS THAT SP(I) IS FALSE.
C
      MAX=MAXP(I)+MAXP(J)
      CALL ABFNS(A,B)
156   N1=NP(KEYI)
      L1=1
      M=0
      CALL LOVLAP(SIGMA,A,B)
      SIGMA=-SIGMA
      M=1
      CALL LOVLAP(PI,A,B)
      DO 204 JC=1,3
      DO 204 IC=JC,3
      S(JORBS+JC,IORBS+IC)=PTR(JC)*PTR(IC)*SIGMA + (PTR(JC+3)*
     .PTR(IC+3)+PTR(JC+6)*PTR(IC+6))*PI
204   S(JORBS+IC,IORBS+JC)=S(JORBS+JC,IORBS+IC)
      IF(ND(KEYJ).EQ.0) GO TO 210
C
C     BRANCH AROUND (S(I)!D(J)) IF ALREADY DONE.
C
      IF(JGO) GO TO 160
C
C     (S(I)!D(J)).
C
      N1=NS(KEYI)
      L1=0
149   N2=ND(KEYJ)
      L2=2
      IF(PD(J)) GO TO 142
      SK2=EXPD(KEYJ)
      MAX=MAXS(I)+MAXD(J)
      CALL ABFNS(A,B)
142   M=0
      CALL LOVLAP(SIGMA,A,B)
      IF(C2(KEYJ).EQ.0.D0) GO TO 151
      SK2=EXPD2(KEYJ)
      CALL ABFNS(A1,B1)
      CALL LOVLAP(PART2,A1,B1)
      SIGMA=C1(KEYJ)*SIGMA+C2(KEYJ)*PART2
      SK2=EXPD(KEYJ)
151   JD=JORBS+3
      DO 205 IC=1,5
205   S(JD+IC,IORBS)=DTR(IC)*SIGMA
      IF(JGO) GO TO 146
C
C     SP(I) IS TRUE IF HERE SO BRANCH AS WE ALSO HAVE D ON ATOM J.
C
      GO TO 170
160   JGO=.FALSE.
C
C          (P(I)!D(J)).
C
      N2=ND(KEYJ)
      L2=2
      IF(PD(J)) GO TO 178
      SK2=EXPD(KEYJ)
      MAX=MAXP(I)+MAXD(J)
      CALL ABFNS(A,B)
178   IF(C2(KEYJ).EQ.0.D0) GO TO 170
      SK2=EXPD2(KEYJ)
      CALL ABFNS(A1,B1)
      SK2=EXPD(KEYJ)
170   N1=NP(KEYI)
      L1=1
      M=0
      CALL LOVLAP(SIGMA,A,B)
      M=1
      CALL LOVLAP(PI,A,B)
      IF(C2(KEYJ).EQ.0.D0) GO TO 171
      SK2=EXPD2(KEYJ)
      CALL LOVLAP(PART2,A1,B1)
      PI=C1(KEYJ)*PI+C2(KEYJ)*PART2
      M=0
      CALL LOVLAP(PART2,A1,B1)
      SIGMA=C1(KEYJ)*SIGMA+C2(KEYJ)*PART2
      SK2=EXPD(KEYJ)
171   SIGMA=-SIGMA
      DO 206 IC=1,3
      DO 206 JC=1,5
206   S(JD+JC,IORBS+IC)=DTR(JC)*PTR(IC)*SIGMA+(DTR(JC+5)*PTR(IC+3)
     .+DTR(JC+10)*PTR(IC+6))*PI
C
C     (D(I)!D(J)).
C
      IF(ND(KEYI).EQ.0) GO TO 210
      MAX=MAXD(I)+MAXD(J)
      IF(PD(I)) GO TO 208
      SK1=EXPD(KEYI)
      CALL ABFNS(A,B)
      IF(C2(KEYJ).EQ.0.D0) GO TO 208
      SK2=EXPD2(KEYJ)
      CALL ABFNS(A1,B1)
      SK2=EXPD(KEYJ)
208   N1=ND(KEYI)
      L1=2
      M=0
      CALL LOVLAP(SIGMA,A,B)
      M=1
      CALL LOVLAP(PI,A,B)
      M=2
      CALL LOVLAP(DELTA,A,B)
      CC=C2(KEYI)
      IF(C2(KEYJ).EQ.0.D0) GO TO 173
      CC=C1(KEYJ)*CC
      SK2=EXPD2(KEYJ)
      CALL LOVLAP(PART2,A1,B1)
      DELTA=C1(KEYJ)*DELTA+C2(KEYJ)*PART2
      M=1
      CALL LOVLAP(PART3,A1,B1)
      PI=C1(KEYJ)*PI+C2(KEYJ)*PART3
      M=0
      CALL LOVLAP(PART4,A1,B1)
      SIGMA=C1(KEYJ)*SIGMA+C2(KEYJ)*PART4
      SK2=EXPD(KEYJ)
      M=2
173   IF(C2(KEYI).EQ.0.D0) GO TO 172
      IF(KEYI.EQ.KEYJ) GO TO 176
      SK1=EXPD2(KEYI)
      CALL ABFNS(A1,B1)
      CALL LOVLAP(PART2,A1,B1)
      M=1
      CALL LOVLAP(PART3,A1,B1)
      M=0
      CALL LOVLAP(PART4,A1,B1)
176   SIGMA=C1(KEYI)*SIGMA+CC*PART4
      PI =C1(KEYI)*PI+CC*PART3
      DELTA=C1(KEYI)*DELTA+CC*PART2
      IF(C2(KEYJ).EQ.0.D0) GO TO 172
      SK1=EXPD2(KEYI)
      SK2=EXPD2(KEYJ)
      CALL ABFNS(A1,B1)
      M=0
      CALL LOVLAP(PART2,A1,B1)
      CC=C2(KEYI)*C2(KEYJ)
      SIGMA=SIGMA+CC*PART2
      M=1
      CALL LOVLAP(PART2,A1,B1)
      PI=PI+CC*PART2
      M=2
      CALL LOVLAP(PART2,A1,B1)
      DELTA=DELTA+CC*PART2
172   PI=-PI
      JD=JORBS+3
      DO 211 IC=1,5
      ID=IORBS+3
      DO 211 JC=1,5
      S(JD+JC,ID+IC) = DTR(IC)*DTR(JC)*SIGMA+(DTR(IC+5)*DTR(JC+5)
     .+DTR(IC+10)*DTR(JC+10))*PI+(DTR(IC+15)*DTR(JC+15)+DTR(IC+20)
     .*DTR(JC+20))*DELTA
211   S(JD+IC,ID+JC)=S(JD+JC,ID+IC)
C
C     FILLING IN OTHER HALF OF OVERLAPS FOR (J!I) AS NEEDED.
C
210   IF(KEYI.EQ.KEYJ) GO TO 213
      N2=NS(KEYJ)
      L2=0
      SK2=EXPS(KEYJ)
      M=0
      JGO=.TRUE.
      IF(NP(KEYI).EQ.0) GO TO 131
      IF(SP(I)) GO TO 215
      MAX=MAXP(I)+MAXS(J)
      SK1=EXPP(KEYI)
      CALL ABFNS(A,B)
      GO TO 220
215   IF(PD(I)) GO TO 227
217   IF(ND(KEYI).EQ.0) GO TO 131
      MAX=MAXD(I)+MAXS(J)
      SK1=EXPD(KEYI)
      CALL ABFNS(A,B)
      GO TO 221
227   IF(SP(J)) GO TO 131
      N1=ND(KEYI)
      L1=2
      SK1=EXPD(KEYI)
228   IF(NP(KEYJ).EQ.0) GO TO 131
      SK2=EXPP(KEYJ)
      MAX=MAXD(I)+MAXP(J)
      CALL ABFNS(A,B)
      IF(C2(KEYI).EQ.0.D0) GO TO 222
      SK1=EXPD2(KEYI)
      CALL ABFNS(A1,B1)
      SK1=EXPD(KEYI)
      GO TO 222
213   IF(NP(KEYI).EQ.0) GO TO 131
      DO 237 IC=1,3
237   S(JORBS,IORBS+IC)=-S(JORBS+IC,IORBS)
      IF(ND(KEYI).EQ.0) GO TO 131
      DO 238 IC=4,8
      S(JORBS,IORBS+IC)=S(JORBS+IC,IORBS)
      DO 238 JC=1,3
238   S(JORBS+JC,IORBS+IC)=-S(JORBS+IC,IORBS+JC)
131   CONTINUE
300   IF(NH.EQ.0) GO TO 130
      N2=1
      L2=0
      M=0
      SK2=PEEP
      DO 301 J=1,NH
      DELX=X(J)-X(INH)
      DELY=Y(J)-Y(INH)
      DELZ=Z(J)-Z(INH)
      RT2=DELX**2+DELY**2
      R=DSQRT(RT2+DELZ**2)
C
C     STORE DISTANCES IN LOWER LEFT TRIANGLE OF S(I,J).
C
      S(INH,J)=R
      IF(RT2.GT.1.D-10) GO TO 303
      CB=1.D0
      SB=0.D0
      SA=0.D0
      GO TO 302
303   T=DSQRT(RT2)
      CB=DELX/T
      SB=DELY/T
      SA=T/R
302   CA=DELZ/R
      R=R*AUI
C
C     H(J)!S(I)).
C
      N1=NS(KEYI)
      L1=0
      MAX=1+MAXS(I)
      SK1=EXPS(KEYI)
      CALL ABFNS(A,B)
      CALL LOVLAP(SIGMA,A,B)
      S(J,IORBS)=SIGMA
      IF(NP(KEYI).EQ.0) GO TO 301
      IF(SP(I)) GO TO 304
      SK1=EXPP(KEYI)
      MAX=1+MAXP(I)
      CALL ABFNS(A,B)
304   N1=NP(KEYI)
      L1=1
      CALL LOVLAP(SIGMA,A,B)
      S(J,IORBS+3)=CA*SIGMA
      SIGMA=SIGMA*SA
      S(J,IORBS+2)=SB*SIGMA
      S(J,IORBS+1)=CB*SIGMA
      IF(ND(KEYI).EQ.0) GO TO 301
      IF(PD(I)) GO TO 305
      SK1=EXPD(KEYI)
      MAX=1+ND(KEYI)
      CALL ABFNS(A,B)
305   N1=ND(KEYI)
      L1=2
      CALL LOVLAP(SIGMA,A,B)
      IF(C2(KEYI).EQ.0.D0) GO TO 181
      SK1=EXPD2(KEYI)
      CALL ABFNS(A1,B1)
      CALL LOVLAP(PART2,A1,B1)
      SK1=EXPD(KEYI)
      SIGMA=C1(KEYI)*SIGMA+C2(KEYI)*PART2
181   CONTINUE
      S(J,IORBS+5)=(1.D0-1.5D0*SA*SA)*SIGMA
      SIGMA=SIGMA*SQRT3*SA
      S(J,IORBS+4)=.5D0*SA*(CB*CB-SB*SB)*SIGMA
      S(J,IORBS+6)=CB*SB*SA*SIGMA
      SIGMA=SIGMA*CA
      S(J,IORBS+7)=CB*SIGMA
      S(J,IORBS+8)=SB*SIGMA
301   CONTINUE
130   CONTINUE
C
C     CALL DELETS TO SET CERTAIN OVERLAP INTEGRALS = 0.
C
      IF(.NOT.LB) GO TO 835
      CALL DELETS(S,COUL0,SORB,NDIM)
      WRITE(6,2010)
2010  FORMAT(///)
C
C     CALCULATE INTERATOMIC MADELUNG PARAMETERS.
C
835   IF(METH.LT.3) GO TO 450
      IC=1
      DO 401 I=1,NA
      KEYI=KEY(I)
      RS=0.0D0
      ID=IC
      MAD(ID,ID)=DBLE(MADS(MXUSR2-KEYI))
      IF(NP(KEYI).EQ.0) GO TO 402
      ID=IC+1
      MAD(ID,ID)=DBLE(MADP(MXUSR2-KEYI))
      IF(ND(KEYI).EQ.0) GO TO 403
      ID=IC+2
      MAD(ID,ID)=DBLE(MADD(MXUSR2-KEYI))
403   M=IC+1
      DO 404 K=M,ID
      K1=K-1
      DO 404 L=IC,K1
      CA=MAD(K,K)
      CB=MAD(L,L)
      SA=VALMAD(CA,CB,RS)
      MAD(K,L)=SA
404   MAD(L,K)=SA
402   IF(I.EQ.1) GO TO 401
      IM1=I-1
      JC=1
      DO 406 J=1,IM1
      KEYJ=KEY(J)
C
C 27.21138602D0 EV = 1 HARTREE CHANGED TO EXACT VALUE FROM 27.21
C USED BY OLD CODE MC
C
      RS=S(I,J)*AUI/EVTOHARTREE
      JD=JC
      IF(NP(KEYJ).NE.0) JD=JC+1
      IF(ND(KEYJ).NE.0) JD=JC+2
      DO 407 K=IC,ID
      CA=MAD(K,K)
      DO 407 L=JC,JD
      CB=MAD(L,L)
      SA=VALMAD(CA,CB,RS)
      MAD(K,L)=SA
407   MAD(L,K)=SA
406   JC=JD+1
401   IC=ID+1
C
C     SET UP DISTANCE MATRIX FOR PRINTING.
C     STUFF ELEMENTS OF S INTO C TO GET THEM OUT OF THE WAY.
C
450   ISUB=1
C
C     ZERO DISTANCE ALONG DIAGONAL.
C
      S(1,1)=0.D0
      DO 1010 I=2,NATOM
      S(I,I)=0.D0
      IM1=I-1
      DO 1005 J=1,IM1
      C(ISUB)=S(J,I)
      ISUB=ISUB+1
1005  S(J,I)=S(I,J)
1010  CONTINUE
      IF(PRT(3)) GO TO 2004
      WRITE(6,2000)
2000  FORMAT('DISTANCE MATRIX')
      CALL PEGLEG(S,NATOM,NDIM)
2004  IF(PUN(3)) WRITE(7,2050) ((S(I,J),I=1,NATOM),J=1,NATOM)
2050  FORMAT(8F9.6)
C
C     SET UP OVERLAP MATRIX FOR PRINTING.
C     REPLACE ELEMENTS IN OVERLAP MATRIX FROM C.
C
      S(1,1)=1.D0
      ISUB=1
      DO 1025 I=2,NDIM
      S(I,I)=1.D0
      IM1=I-1
      DO 1020 J=1,IM1
      IF(I.GT.NATOM) GO TO 1020
      S(J,I)=C(ISUB)
      ISUB=ISUB+1
1020  S(I,J)=S(J,I)
1025  CONTINUE
      IF(PRT(4)) GO TO 2005
      WRITE(6,2001)
2001  FORMAT(/,'OVERLAP MATRIX')
      CALL PEGLEG(S,NDIM,NDIM)
2005  IF(PUN(4)) WRITE(7,2050) S
C
C     PRINT OUT MADELUNG PARAMETERS.
C
      IF(METH.LT.3) GO TO 460
      IF(PRT(5)) GO TO 2006
      WRITE(6,2002)
2002  FORMAT('MADELUNG PARAMETERS')
      CALL PEGLEG(MAD,NTYPE,NTYPE)
2006  IF(PUN(5)) WRITE(7,2050) MAD
 
460   CONTINUE
      RETURN
      END
